server:
  port: 8081
  
management:
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    configprops:
      # WARNING: SECURITY RISK - DO NOT USE IN PRODUCTION ENVIRONMENT
      # This configuration exposes sensitive data and should only be used for development or testing purposes.
      # Ensure this is disabled in any environment where security is a concern.
      show-values: ALWAYS
    health:
      probes:
        enabled: true
      show-details: always
            
  
spring:
  
  application:
    name: spring-6-rest-mvc
    
  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true  
    
  datasource: 
    url: "jdbc:h2:mem:restmvcdb"
    driverClassName: "org.h2.Driver"
    username: sa
    password: password
    
  flyway:
    enabled: false
  
  jpa:
    #hibernate:
      #ddl-auto: create-drop
    properties:
      jakarta:
        persistence:
          schema-generation:
            scripts:
              #action: drop-and-create
              #create-source: metadata
              #drop-target: scripts/drop-and-create.sql
              #create-target: scripts/drop-and-create.sql

  security:
    # basic auth disabled and replace by resource server
    #user:
    #  name: master
    #  password: password 
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9000
          
  kafka:
    consumer:
      group-id: sfg
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties: 
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  
  cache:
    cache-names: "beerCache,beerListCache,customerCache,customerListCache"

  docker:
    compose:
      enabled: true
      file: compose-h2.yaml
      stop:
        command: down
        
appconfig:
  cache:
    enabled: true

controllers:
  customer-controller:
    request-path: "/api/v1/customer"
  beer-controller:
    request-path: "/api/v1/beer"  
  beer-order-controller:
    request-path: "/api/v1/beerOrder"  
  
springdoc:
  show-oauth2-endpoints: true
  api-docs:
    enabled: true
  swagger-ui:
    oauth:
      # do that not on production!
      client-id: messaging-client
      client-secret: secret

logging:
  level:
    org.zalando.logbook: TRACE
    # kafka is very verbose here
    org.apache.kafka.clients.NetworkClient: ERROR
    
logbook:
  filter:
    enabled: true
  format:
    style: http
  obfuscate:
    headers:
      - Authorization
      - X-Secret
    parameters:
      - access_token
      - password
  predicate:
    exclude:
      # Exclude HTML-related calls and specific endpoints that Logbook doesn't handle correctly
      - path: /actuator/health/**
      - path: /h2-console/**  # Exclude H2 console
      - path: /swagger-ui/**  # Exclude Swagger UI if used
      - path: /v3/api-docs/** # Exclude OpenAPI docs if used
      - path: /favicon.ico
        # Add more exclusions as needed
        
security:
  auth-server-health-url: http://localhost:9000
  authorization-url-for-openapi: http://localhost:9000/oauth2/auth
  token-url-for-openapi: http://localhost:9000/oauth2/token
  refresh-url-for-openapi: http://localhost:9000/oauth2/refresh-token
  cors:
    allowed-origins:
      - http://localhost:8080 # gateway project runs on port 8080
      - http://127.0.0.1:8080 # gateway project runs on port 8080
      - http://localhost:30080 # gateway project runs on port 30080
      - http://127.0.0.1:30080 # gateway project runs on port 30080
