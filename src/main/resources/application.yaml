server:
  port: 8081
  
management:
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
            
  
spring:
  
  application:
    name: spring-6-rest-mvc
    
  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true  
    
  datasource: 
    url: "jdbc:h2:mem:testdb"
    driverClassName: "org.h2.Driver"
    username: sa
    password: password
    
  flyway:
    enabled: false
  
  jpa:
    #hibernate:
      #ddl-auto: create-drop
    properties:
      jakarta:
        persistence:
          schema-generation:
            scripts:
              #action: drop-and-create
              #create-source: metadata
              #drop-target: scripts/drop-and-create.sql
              #create-target: scripts/drop-and-create.sql

  security:
    # basic auth disabled and replace by resource server
    #user:
    #  name: master
    #  password: password 
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9000
          
  kafka:
    consumer:
      group-id: sfg
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties: 
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  
  cache:
    cache-names: "beerCache,beerListCache,customerCache,customerListCache"

  docker:
    compose:
      enabled: false
      stop:
        command: down
        
appconfig:
  cache:
    enabled: true

controllers:
  customer-controller:
    request-path: "/api/v1/customer"
  beer-controller:
    request-path: "/api/v1/beer"  
  beer-order-controller:
    request-path: "/api/v1/beerOrder"  
    
springdoc:
  api-docs:
    enabled: true
    path: "/v3/api-docs"

logging:
  level:
    org.zalando.logbook: TRACE
    # kafka is very verbose here
    org.apache.kafka.clients.NetworkClient: ERROR
    
logbook:
  filter:
    enabled: true
  format:
    style: http
  obfuscate:
    headers:
      - Authorization
      - X-Secret
    parameters:
      - access_token
      - password
  predicate:
    exclude:
      - path: /actuator/health    
