server:
  port: 8081
  
management:
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always  

spring:
  application:
    name: spring-6-rest-mvc
    
  flyway:
    enabled: true  
    
  datasource:
    username: restadmin
    password: password
    url: jdbc:mysql://localhost:3306/restdb?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      pool-name: RestDB-Pool
      maximum-pool-size: 5
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
        
  jpa:
    database: mysql
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        ddl-auto: validate
        # Show SQL  
        show_sql: false
        # Format SQL
        format_sql: true
        
  security:
    user:
      name: master
      password: password   
      
  cache:
    cache-names: "beerCache,beerListCache,customerCache,customerListCache"   
    
  kafka:
    consumer:
      group-id: sfg
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer  
    
  docker:
    compose:
      enabled: true
      stop:
        command: down

appconfig:
  cache:
    enabled: true    

# Show bind values
logging:
  level:
    org.hibernate.orm.jdbc.bind: INFO
    org.zalando.logbook: TRACE
    # kafka is very verbose here
    org.apache.kafka.clients.NetworkClient: ERROR

logbook:
  filter:
    enabled: true
  format:
    style: http
  obfuscate:
    headers:
      - Authorization
      - X-Secret
    parameters:
      - access_token
      - password
  predicate:
    exclude:
      - path: /actuator/health    
  
controllers:
  customer-controller:
    request-path: "/api/v1/customer"
  beer-controller:
    request-path: "/api/v1/beer"
  beer-order-controller:
    request-path: "/api/v1/beerOrder"  
    
springdoc:
  show-oauth2-endpoints: true
  api-docs:
    enabled: true
  swagger-ui:
    oauth:
      # do that not on production!
      client-id: messaging-client
      client-secret: secret
        
security:
  authorization-url: http://localhost:9000/oauth2/auth
  token-url: http://localhost:9000/oauth2/token
  refresh-url: http://localhost:9000/oauth2/refresh-token
  cors:
    # gateway project runs on port 8080
    allowed-origins: http://localhost:8080,http://127.0.0.1:8080
  
